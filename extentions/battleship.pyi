from __future__ import annotations
from random import randint

NUM10: tuple[str]
CHARAJ: str

class Square:
    """square of board

    possible values:\n
    'N, 🌊': nothing, ocean
    'S, ⏹': ship
    'H, 💥': ship hit
    'M, 📌': miss
    """

    def __init__(self): ...

class Board:
    def __init__(self) -> None: ...
    @property
    def columns(self) -> list[str]: ...
    @property
    def rows(self) -> list[str]: ...
    def __str__(self) -> str:
        """for use during placing ships, all ships are visible"""
        ...
    async def getsquare(self, x, y) -> Square | None:
        """return a Square object at (x, y), with indexing starting from one"""
        ...
    async def hit_square(self, x: int, y: int):
        """change a square's occupier to the miss symbol and return the square"""
        ...
    async def already_placed(self, x: int, y: int): ...

class Ship:
    """base class of ship

    subclasses supply length for init. x and y have to be in board range,
    face has to be in 'nesw'
    """

    def __init__(self, length: int, bd: Board, x: int, y: int, face: str) -> None: ...
    def __repr__(self) -> str: ...
    async def generate_span(self) -> bool:
        """mark ship on board, based on type of ship, facing direction, and head point

        return True on success and False if out of range or overlaps another ship
        """
        ...
    async def is_hit(self, sq: Square) -> bool:
        """check if a square on the board is one in the ship.

        call is_dead if this returns True
        """
        ...
    async def is_dead(self) -> bool:
        """checks if all of this ship's squares have been hit"""
        ...
    async def hide(self) -> None: ...
    async def show(self) -> None: ...

class Carrier(Ship):
    def __init__(self, bd: Board, x: int, y: int, face: str) -> None: ...

class Battleship(Ship):
    def __init__(self, bd: Board, x: int, y: int, face: str) -> None: ...

class Cruiser(Ship):
    def __init__(self, bd: Board, x: int, y: int, face: str) -> None: ...

class Submarine(Cruiser): ...

class Destroyer(Ship):
    def __init__(self, bd: Board, x: int, y: int, face: str) -> None: ...

class BshError:
    def __init__(self) -> None: ...

class Player:
    def __init__(self, c: str, plyr) -> None: ...
    async def pin_ship(self, x, y, face) -> int:
        """add the next ship to the board"""
        ...
    async def all_ship_check(self, sq: Square) -> bool: ...
    async def all_ship_dead(self) -> bool: ...
    async def hide_all_ships(self) -> None: ...
    async def show_all_ships(self) -> None: ...
