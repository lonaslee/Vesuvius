class Square:
    def __init__(self, x, y) -> None: ...
    async def naybors(self) -> list[Square]: ...
    async def liberty(self) -> tuple[bool, list[Square]]:
        """checks this square's liberty
        returns a list of [liberty: bool, group: set[Square]]. liberty is if
        the group has liberty. group is a set of all squares of the connected group.
        """
        ...
    async def _liberty2(self, gp: list) -> bool: ...
    async def empty_group(self) -> tuple[str, set[Square]]:
        """gets a set of all neighboring squares if its occ is N"""
        ...
    async def _group2(self, gp: set, sr: set) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Board:
    def __init__(self, size=19) -> None: ...
    def __str__(self) -> str: ...
    async def as_string(self) -> str: ...
    async def all_liberties(self) -> None: ...
    async def all_emptygroups(self) -> tuple[int, int]: ...
    async def all_counts(self) -> tuple[str, str]:
        """get the number of occupied and surrounded groups both players have
        Returns a tuple consisting of [WinnerStr, Str[NumTOnum]]. Nums
        are the number of solid stones plus the number of empty squares the
        solid stones surround.
        """
        ...
    async def assign(self, x, y, clr) -> int:
        """place a square
        x, y are indexed from one, color must be 'B' or 'W'.
        Return 1 on success and 0 if the square is occupied or
        if it breaks the ko rule. Checks all liberties after aswell.
        """
        ...
